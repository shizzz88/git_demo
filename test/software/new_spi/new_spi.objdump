
new_spi.elf:     file format elf32-littlenios2
new_spi.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081c8

Program Header:
    LOAD off    0x00000074 vaddr 0x00008000 paddr 0x00008000 align 2**0
         filesz 0x00001450 memsz 0x00001450 flags r-x
    LOAD off    0x000014c4 vaddr 0x00009450 paddr 0x00009450 align 2**0
         filesz 0x00000268 memsz 0x0000036c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00000074  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a8  00008020  00008020  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001254  000081c8  000081c8  0000023c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  0000941c  0000941c  00001490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000268  00009450  00009450  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000104  000096b8  000096b8  0000172c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000097bc  000097bc  0000172c  2**0
                  CONTENTS
  7 .comment      000004d0  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000398  00000000  00000000  00001c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000004f5  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006584  00000000  00000000  0000248d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001703  00000000  00000000  00008a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000043f6  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000544  00000000  00000000  0000e50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000698  00000000  00000000  0000ea50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000f0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .cpu          00000005  00000000  00000000  0001076b  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00010770  2**0
                  CONTENTS, READONLY
 18 .sysid_hash   00000004  00000000  00000000  00010771  2**0
                  CONTENTS, READONLY
 19 .sysid_base   00000004  00000000  00000000  00010775  2**0
                  CONTENTS, READONLY
 20 .sysid_time   00000004  00000000  00000000  00010779  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001077d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00010788  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00010793  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0001079e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  000107aa  2**0
                  CONTENTS, READONLY
 26 .jdi          00004a5b  00000000  00000000  000107bd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 
00008020 l    d  .exceptions	00000000 
000081c8 l    d  .text	00000000 
0000941c l    d  .rodata	00000000 
00009450 l    d  .rwdata	00000000 
000096b8 l    d  .bss	00000000 
000097bc l    d  .onchip_memory2_0	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .debug_alt_sim_info	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Project/EDK/test/software/new_spi_bsp//
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/crt0.S
0000820c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Project/EDK/test/software/new_spi_bsp//
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Project/EDK/test/software/new_spi_bsp//
00000000 l    df *ABS*	00000000 d:/Project/EDK/test/software/new_spi_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009450 l     O .rwdata	0000002c jtag_uart_0
00008340 l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000085a8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000087a0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000087e8 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000088c0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008908 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00008be0 l     F .text	000000c8 alt_file_locked
00008e28 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00009624 l     O .rwdata	00000054 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_exit.c
000093cc l     F .text	00000030 alt_sim_halt
0000826c g     F .text	00000060 alt_main
000096bc g     O .bss	00000100 alt_irq
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
000096b8 g     O .bss	00000004 errno
0000967c g     O .rwdata	00000004 alt_argv
00011678 g       *ABS*	00000000 _gp
000094a4 g     O .rwdata	00000180 alt_fd_list
00009084 g     F .text	00000090 alt_find_dev
000089c8 g     F .text	00000074 alt_io_redirect
00009068 g     F .text	0000001c altera_nios2_irq_init
00008418 g     F .text	00000100 altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00009694 g     O .rwdata	00000004 alt_max_fd
00008a3c g     F .text	000001a4 alt_irq_register
000097bc g       *ABS*	00000000 __bss_end
00008f68 g     F .text	00000100 alt_tick
00008ecc g     F .text	0000009c alt_alarm_stop
0000969c g     O .rwdata	00000004 alt_irq_active
000080ec g     F .exceptions	000000dc alt_irq_handler
0000947c g     O .rwdata	00000028 alt_dev_null
0000968c g     O .rwdata	00000008 alt_dev_list
000097bc g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008620 g     F .text	00000084 alt_avalon_timer_sc_init
00008518 g     F .text	00000090 altera_avalon_jtag_uart_write
000081c8 g     F .text	00000048 _start
000096a4 g     O .rwdata	00000004 _alt_tick_rate
000096a8 g     O .rwdata	00000004 _alt_nticks
000082fc g     F .text	00000044 alt_sys_init
00008370 g     F .text	00000054 altera_avalon_jtag_uart_read_fd
000091f8 g     F .text	000000ac alt_get_fd
00009370 g     F .text	0000003c memcmp
000097bc g       *ABS*	00000000 __alt_stack_base
00009114 g     F .text	000000e4 alt_find_file
00008810 g     F .text	000000b0 alt_dev_llist_insert
000096b8 g       *ABS*	00000000 __bss_start
00008210 g     F .text	0000005c main
00009680 g     O .rwdata	00000004 alt_envp
000083c4 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
00009698 g     O .rwdata	00000004 alt_errno
000082cc g     F .text	00000030 alt_irq_init
00008e70 g     F .text	0000005c alt_release_fd
000096b4 g     O .rwdata	00000004 _impure_ptr
00009678 g     O .rwdata	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00009684 g     O .rwdata	00000008 alt_fs_list
000096b8 g       *ABS*	00000000 _edata
000097bc g       *ABS*	00000000 _end
000092a4 g     F .text	000000cc exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
000093fc g     F .text	00000020 _exit
000093ac g     F .text	00000020 strlen
00008ca8 g     F .text	00000180 open
000096a0 g     O .rwdata	00000004 alt_priority_mask
000096ac g     O .rwdata	00000008 alt_alarm_list
000086a4 g     F .text	000000fc close


Disassembly of section .entry:

00008000 <__reset>:
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__alt_mem_onchip_memory2_0+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 1, 1, 0b, 1b
    .popsection
#endif /* Initialize Instruction Cache */

/*
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08607214 	ori	at,at,33224
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
Disassembly of section .exceptions:

00008020 <alt_exception>:
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)

        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)

        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
#endif /* ALT_CI_INTERRUPT_VECTOR_N */

        .section .exceptions.irqhandler, "xa"
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>

        /*
         * The interrupt testing code (.exceptions.irqtest) will be
         * linked here here. If an interrupt is active, it calls the HAL
         * IRQ handler (alt_irq_handler()) which successively calls
         * registered interrupt handler(s) until no interrupts remain
         * pending. It then jumps to .exceptions.exit. If there is no
         * interrupt then it continues to .exception.notirq, below.
         */

        .section .exceptions.notirq, "xa"

        /*
         * Prepare to service unimplemtned instructions or traps,
         * each of which is optionally inked into section .exceptions.soft,
         * which will preceed .exceptions.unknown below.
         *
         * Unlike interrupts, we want to skip the exception-causing instructon
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

        /*
         * Other exception handling code, if enabled, will be linked here.
         * This includes unimplemted (multiply/divide) instruction support
         * (a BSP generaton option), and a trap handler (that would typically
         * be augmented with user-specific code). These are not linked in by
         * default.
         */

        /*
         * In the context of linker sections, "unknown" are all exceptions
         * not handled by the built-in handlers above (interupt, and trap or
         * unimplemented instruction decoding, if enabled).
         *
         * Advanced exception types can be serviced by registering a handler.
         * To do so, enable the "Enable Instruction-related Exception API" HAL
         * BSP setting. If this setting is disabled, this handler code will
         * either break (if the debug core is present) or enter an infinite
         * loop because we don't how how to handle the exception.
         */
        .section .exceptions.unknown
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
        /*
         * The C-based HAL routine alt_instruction_exception_entry() will
         * attempt to service the exception by calling a user-registered
         * exception handler using alt_instruction_exception_register().
         * If no handler was registered it will either break (if the
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry

        /*
         * If alt_instruction_exception_entry() returned, the exception was
         * serviced by a user-registered routine. Its return code (now in r2)
         * indicates whether to re-issue or skip the exception-causing
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
        stw   r15,  72(sp)

#else /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API disabled */

        /*
         * We got here because an instruction-related exception occured, but the
         * handler API was not compiled in. We do not presume to know how to
         * handle it. If the debugger is present, break, otherwise hang.
         *
         *  If you get here then one of the following could have happened:
         *
         *  - An instruction-generated exception occured, and the processor
         *    does not have the extra exceptions feature enabled, or you
         *    have not registered a handler using
         *    alt_instruction_exception_register()
         *
         *  Some examples of instruction-generated exceptions and why they
         *  might occur:
         *
         *  - Your program could have been compiled for a full-featured
         *    Nios II core, but it is running on a smaller core, and
         *    instruction emulation has been disabled by defining
         *    ALT_NO_INSTRUCTION_EMULATION.
         *
         *    You can work around the problem by re-enabling instruction
         *    emulation, or you can figure out why your program is being
         *    compiled for a system other than the one that it is running on.
         *
         *  - Your program has executed a trap instruction, but has not
         *    implemented a handler for this instruction.
         *
         *  - Your program has executed an illegal instruction (one which is
         *    not defined in the instruction set).
         *
         *  - Your processor includes an MMU or MPU, and you have enabled it
         *    before registering an exception handler to service exceptions it
         *    generates.
         *
         * The problem could also be hardware related:
         *  - If your hardware is broken and is generating spurious interrupts
         *    (a peripheral which negates its interrupt output before its
         *    interrupt handler has been executed will cause spurious
         *    interrupts)
         */
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
#else
       /*
        *  If there is no debug stub then a BREAK will probably cause a reboot.
        *  An infinate loop will probably be more useful.
        */
0:
        br   0b
#endif /* NIOS2_HAS_DEBUG_STUB */

#endif /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API */

        .section .exceptions.exit.label
.Lexception_exit:

        .section .exceptions.exit, "xa"

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

#endif

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
    80fc:	0005313a 	rdctl	r2,ipending
    8100:	e0bfff15 	stw	r2,-4(fp)
    8104:	e0bfff17 	ldw	r2,-4(fp)
    8108:	e0bffe15 	stw	r2,-8(fp)
    810c:	e0bffe17 	ldw	r2,-8(fp)
    8110:	e0bffb15 	stw	r2,-20(fp)
#ifdef ALT_CI_INTERRUPT_VECTOR
  alt_32 offset;
  char*  alt_irq_base = (char*)alt_irq;
#else
  alt_u32 active;
  alt_u32 mask;
  alt_u32 i;
#endif /* ALT_CI_INTERRUPT_VECTOR */
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();

#ifdef ALT_CI_INTERRUPT_VECTOR
  /*
   * Call the interrupt vector custom instruction using the 
   * ALT_CI_INTERRUPT_VECTOR macro.
   * It returns the offset into the vector table of the lowest-valued pending
   * interrupt (corresponds to highest priority) or a negative value if none.
   * The custom instruction assumes that each table entry is eight bytes.
   */
  while ((offset = ALT_CI_INTERRUPT_VECTOR) >= 0) {
    struct ALT_IRQ_HANDLER* handler_entry = 
      (struct ALT_IRQ_HANDLER*)(alt_irq_base + offset);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    handler_entry->handler(handler_entry->context);
#else
    handler_entry->handler(handler_entry->context, offset >> 3);
#endif
  }
#else /* ALT_CI_INTERRUPT_VECTOR */
  /* 
   * Obtain from the interrupt controller a bit list of pending interrupts,
   * and then process the highest priority interrupt. This process loops, 
   * loading the active interrupt list on each pass until alt_irq_pending() 
   * return zero.
   * 
   * The maximum interrupt latency for the highest priority interrupt is
   * reduced by finding out which interrupts are pending as late as possible.
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();

  do
  {
    i = 0;
    8114:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8118:	00800044 	movi	r2,1
    811c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Test each bit in turn looking for an active interrupt. Once one is 
     * found, the interrupt handler asigned by a call to alt_irq_register() is
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8120:	e0fffb17 	ldw	r3,-20(fp)
    8124:	e0bffc17 	ldw	r2,-16(fp)
    8128:	1884703a 	and	r2,r3,r2
    812c:	1005003a 	cmpeq	r2,r2,zero
    8130:	1000101e 	bne	r2,zero,8174 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
    8134:	00c00074 	movhi	r3,1
    8138:	18e5af04 	addi	r3,r3,-26948
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	10800224 	muli	r2,r2,8
    8144:	10c9883a 	add	r4,r2,r3
    8148:	00c00074 	movhi	r3,1
    814c:	18e5af04 	addi	r3,r3,-26948
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	10800224 	muli	r2,r2,8
    8158:	10c5883a 	add	r2,r2,r3
    815c:	10800104 	addi	r2,r2,4
    8160:	20c00017 	ldw	r3,0(r4)
    8164:	11000017 	ldw	r4,0(r2)
    8168:	e17ffd17 	ldw	r5,-12(fp)
    816c:	183ee83a 	callr	r3
#endif
        break;
    8170:	00000706 	br	8190 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
    8174:	e0bffc17 	ldw	r2,-16(fp)
    8178:	1085883a 	add	r2,r2,r2
    817c:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8180:	e0bffd17 	ldw	r2,-12(fp)
    8184:	10800044 	addi	r2,r2,1
    8188:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    818c:	003fe406 	br	8120 <alt_irq_handler+0x34>
    8190:	0005313a 	rdctl	r2,ipending
    8194:	e0bffe15 	stw	r2,-8(fp)
    8198:	e0bffe17 	ldw	r2,-8(fp)
    819c:	e0bfff15 	stw	r2,-4(fp)
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	e0bffb15 	stw	r2,-20(fp)

    active = alt_irq_pending ();
    
  } while (active);
    81a8:	e0bffb17 	ldw	r2,-20(fp)
    81ac:	1005003a 	cmpeq	r2,r2,zero
    81b0:	1000011e 	bne	r2,zero,81b8 <alt_irq_handler+0xcc>
    81b4:	003fd706 	br	8114 <alt_irq_handler+0x28>
#endif /* ALT_CI_INTERRUPT_VECTOR */

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81b8:	dfc00617 	ldw	ra,24(sp)
    81bc:	df000517 	ldw	fp,20(sp)
    81c0:	dec00704 	addi	sp,sp,28
    81c4:	f800283a 	ret
Disassembly of section .text:

000081c8 <_start>:

    .size __reset, . - __reset
#endif /* Jump to _start */

/*
 * When not using exit, provide an _exit symbol to prevent unresolved
 * references to _exit from the linker script.
 */
#ifdef ALT_NO_EXIT
    .globl _exit
_exit:
#endif

/*************************************************************************\
|                          TEXT SECTION (.text)                           |
\*************************************************************************/

/*
 * Start of the .text section, and also the code entry point when
 * the code is executed by a bootloader rather than directly from reset.
 */
    .section .text
    .align 2

    .globl _start
    .type _start, @function
_start:

/*
 * Initialize the data cache if present (i.e. size > 0) and not
 * optimizing for RTL simulation.
 * RTL simulations can ensure the data cache is already initialized
 * so skipping this loop speeds up RTL simulation.
 */

#if NIOS2_DCACHE_SIZE > 0 && !defined(ALT_SIM_OPTIMIZE)

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    81c8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    81cc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    81d0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    81d4:	00bffd16 	blt	zero,r2,81cc <_start+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 2, 1, 0b, 1b
    .popsection

#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)

#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81d8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81dc:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    81e0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81e4:	d6859e14 	ori	gp,gp,5752

#else /* NIOS2_NUM_OF_SHADOW_REG_SETS > 0 */

    /*
     * Set up the GP and SP in all shadow register sets.
     */

    /* 
     * Check current register set number, if CPU resets into a shadow register 
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
    
    /* Get next pc and store in ea. */
    nextpc ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
    
    /* Reset STATUS register */
    wrctl status, r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
    ori sp, sp, %lo(__alt_stack_pointer)
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
    ori gp, gp, %lo(_gp)     

.Lsetup_sp_and_gp_loop:
    /* 
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
    add r2, r2, r4

    /* Write STATUS */
    wrctl status, r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0

    /* Write the GP in previous register set */
    wrprs gp, gp

    /* Only write the SP in previous register set
     * if using the seperate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set.
     */
#ifdef ALT_INTERRUPT_STACK

    movhi et, %hiadj(__alt_interrupt_stack_pointer)
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1

    br .Lsetup_sp_and_gp_loop
.Lno_shadow_register_set:

#endif /* NIOS2_NUM_OF_SHADOW_REG_SETS */
/*
 * Clear the BSS if not optimizing for RTL simulation.
 *
 * This uses the symbols: __bss_start and __bss_end, which are defined
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81e8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81ec:	10a5ae14 	ori	r2,r2,38584

    movhi r3, %hi(__bss_end)
    81f0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81f4:	18e5ef14 	ori	r3,r3,38844

    beq r2, r3, 1f
    81f8:	10c00326 	beq	r2,r3,8208 <_start+0x40>

0:
    stw zero, (r2)
    81fc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8200:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8204:	10fffd36 	bltu	r2,r3,81fc <_start+0x34>

1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 3, 1, 0b, 1b
    .popsection
#endif /* ALT_SIM_OPTIMIZE */

/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD

#ifdef ALT_STACK_CHECK
    /*
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load

#endif /* CALL_ALT_LOAD */

#ifdef ALT_STACK_CHECK
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8208:	000826c0 	call	826c <alt_main>

0000820c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    820c:	003fff06 	br	820c <alt_after_alt_main>

00008210 <main>:
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main()
{
    8210:	defffd04 	addi	sp,sp,-12
    8214:	df000215 	stw	fp,8(sp)
    8218:	df000204 	addi	fp,sp,8
	char led_out = 0;
    821c:	e03ffe05 	stb	zero,-8(fp)
	int i=0;
    8220:	e03fff15 	stw	zero,-4(fp)
	while(1){
		IOWR(LED_BASE,0,led_out & 0x01);
    8224:	00800074 	movhi	r2,1
    8228:	10841404 	addi	r2,r2,4176
    822c:	e0fffe03 	ldbu	r3,-8(fp)
    8230:	18c0004c 	andi	r3,r3,1
    8234:	10c00035 	stwio	r3,0(r2)
		i=0;
    8238:	e03fff15 	stw	zero,-4(fp)
		while (i<2000000){
    823c:	e0ffff17 	ldw	r3,-4(fp)
    8240:	008007f4 	movhi	r2,31
    8244:	10a11fc4 	addi	r2,r2,-31617
    8248:	10c00416 	blt	r2,r3,825c <main+0x4c>
		i++;
    824c:	e0bfff17 	ldw	r2,-4(fp)
    8250:	10800044 	addi	r2,r2,1
    8254:	e0bfff15 	stw	r2,-4(fp)
    8258:	003ff806 	br	823c <main+0x2c>
		}
		led_out++;
    825c:	e0bffe03 	ldbu	r2,-8(fp)
    8260:	10800044 	addi	r2,r2,1
    8264:	e0bffe05 	stb	r2,-8(fp)
    8268:	003fee06 	br	8224 <main+0x14>

0000826c <alt_main>:
 * the users application, i.e. main().
 */

void alt_main (void)
{
    826c:	defffc04 	addi	sp,sp,-16
    8270:	dfc00315 	stw	ra,12(sp)
    8274:	df000215 	stw	fp,8(sp)
    8278:	df000204 	addi	fp,sp,8
  int result;

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    827c:	0009883a 	mov	r4,zero
    8280:	00082cc0 	call	82cc <alt_irq_init>
    8284:	e03fff15 	stw	zero,-4(fp)

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();

  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8288:	00082fc0 	call	82fc <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");

#if !defined(ALT_USE_DIRECT_DRIVERS) && (defined(ALT_STDIN_PRESENT) || defined(ALT_STDOUT_PRESENT) || defined(ALT_STDERR_PRESENT))

  /*
   * Redirect stdio to the apropriate devices now that the devices have
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    828c:	01000074 	movhi	r4,1
    8290:	21250704 	addi	r4,r4,-27620
    8294:	01400074 	movhi	r5,1
    8298:	29650704 	addi	r5,r5,-27620
    829c:	01800074 	movhi	r6,1
    82a0:	31a50704 	addi	r6,r6,-27620
    82a4:	00089c80 	call	89c8 <alt_io_redirect>
#endif

#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
#endif /* ALT_NO_C_PLUS_PLUS */

#if !defined(ALT_NO_C_PLUS_PLUS) && !defined(ALT_NO_CLEAN_EXIT) && !defined(ALT_NO_EXIT)
  /*
   * Set the C++ destructors to be called at system shutdown. This is only done
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
#endif

  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    82a8:	d1200017 	ldw	r4,-32768(gp)
    82ac:	d1600117 	ldw	r5,-32764(gp)
    82b0:	d1a00217 	ldw	r6,-32760(gp)
    82b4:	00082100 	call	8210 <main>
    82b8:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
    82bc:	01000044 	movi	r4,1
    82c0:	00086a40 	call	86a4 <close>
  exit (result);
    82c4:	e13ffe17 	ldw	r4,-8(fp)
    82c8:	00092a40 	call	92a4 <exit>

000082cc <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    82cc:	defffd04 	addi	sp,sp,-12
    82d0:	dfc00215 	stw	ra,8(sp)
    82d4:	df000115 	stw	fp,4(sp)
    82d8:	df000104 	addi	fp,sp,4
    82dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    82e0:	00090680 	call	9068 <altera_nios2_irq_init>
    82e4:	00800044 	movi	r2,1
    82e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    82ec:	dfc00217 	ldw	ra,8(sp)
    82f0:	df000117 	ldw	fp,4(sp)
    82f4:	dec00304 	addi	sp,sp,12
    82f8:	f800283a 	ret

000082fc <alt_sys_init>:

/*
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    82fc:	defffe04 	addi	sp,sp,-8
    8300:	dfc00115 	stw	ra,4(sp)
    8304:	df000015 	stw	fp,0(sp)
    8308:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    830c:	01000074 	movhi	r4,1
    8310:	21040804 	addi	r4,r4,4128
    8314:	000b883a 	mov	r5,zero
    8318:	01800084 	movi	r6,2
    831c:	01c0fa04 	movi	r7,1000
    8320:	00086200 	call	8620 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    8324:	01000074 	movhi	r4,1
    8328:	21251404 	addi	r4,r4,-27568
    832c:	00083400 	call	8340 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_0, lcd_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    8330:	dfc00117 	ldw	ra,4(sp)
    8334:	df000017 	ldw	fp,0(sp)
    8338:	dec00204 	addi	sp,sp,8
    833c:	f800283a 	ret

00008340 <alt_dev_reg>:
    8340:	defffd04 	addi	sp,sp,-12
    8344:	dfc00215 	stw	ra,8(sp)
    8348:	df000115 	stw	fp,4(sp)
    834c:	df000104 	addi	fp,sp,4
    8350:	e13fff15 	stw	r4,-4(fp)
    8354:	e13fff17 	ldw	r4,-4(fp)
    8358:	d1600504 	addi	r5,gp,-32748
    835c:	00088100 	call	8810 <alt_dev_llist_insert>
    8360:	dfc00217 	ldw	ra,8(sp)
    8364:	df000117 	ldw	fp,4(sp)
    8368:	dec00304 	addi	sp,sp,12
    836c:	f800283a 	ret

00008370 <altera_avalon_jtag_uart_read_fd>:
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8370:	defffa04 	addi	sp,sp,-24
    8374:	dfc00515 	stw	ra,20(sp)
    8378:	df000415 	stw	fp,16(sp)
    837c:	df000404 	addi	fp,sp,16
    8380:	e13ffc15 	stw	r4,-16(fp)
    8384:	e17ffd15 	stw	r5,-12(fp)
    8388:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    838c:	e0bffc17 	ldw	r2,-16(fp)
    8390:	10800017 	ldw	r2,0(r2)
    8394:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8398:	e0bfff17 	ldw	r2,-4(fp)
    839c:	11000a04 	addi	r4,r2,40
    83a0:	e0bffc17 	ldw	r2,-16(fp)
    83a4:	e17ffd17 	ldw	r5,-12(fp)
    83a8:	e1bffe17 	ldw	r6,-8(fp)
    83ac:	11c00217 	ldw	r7,8(r2)
    83b0:	00084180 	call	8418 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    83b4:	dfc00517 	ldw	ra,20(sp)
    83b8:	df000417 	ldw	fp,16(sp)
    83bc:	dec00604 	addi	sp,sp,24
    83c0:	f800283a 	ret

000083c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    83c4:	defffa04 	addi	sp,sp,-24
    83c8:	dfc00515 	stw	ra,20(sp)
    83cc:	df000415 	stw	fp,16(sp)
    83d0:	df000404 	addi	fp,sp,16
    83d4:	e13ffc15 	stw	r4,-16(fp)
    83d8:	e17ffd15 	stw	r5,-12(fp)
    83dc:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    83e0:	e0bffc17 	ldw	r2,-16(fp)
    83e4:	10800017 	ldw	r2,0(r2)
    83e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    83ec:	e0bfff17 	ldw	r2,-4(fp)
    83f0:	11000a04 	addi	r4,r2,40
    83f4:	e0bffc17 	ldw	r2,-16(fp)
    83f8:	e17ffd17 	ldw	r5,-12(fp)
    83fc:	e1bffe17 	ldw	r6,-8(fp)
    8400:	11c00217 	ldw	r7,8(r2)
    8404:	00085180 	call	8518 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8408:	dfc00517 	ldw	ra,20(sp)
    840c:	df000417 	ldw	fp,16(sp)
    8410:	dec00604 	addi	sp,sp,24
    8414:	f800283a 	ret

00008418 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8418:	defff604 	addi	sp,sp,-40
    841c:	df000915 	stw	fp,36(sp)
    8420:	df000904 	addi	fp,sp,36
    8424:	e13ff715 	stw	r4,-36(fp)
    8428:	e17ff815 	stw	r5,-32(fp)
    842c:	e1bff915 	stw	r6,-28(fp)
    8430:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    8434:	e0bff717 	ldw	r2,-36(fp)
    8438:	10800017 	ldw	r2,0(r2)
    843c:	e0bffb15 	stw	r2,-20(fp)

  char * ptr = buffer;
    8440:	e0bff817 	ldw	r2,-32(fp)
    8444:	e0bffc15 	stw	r2,-16(fp)
  char * end = buffer + space;
    8448:	e0fff817 	ldw	r3,-32(fp)
    844c:	e0bff917 	ldw	r2,-28(fp)
    8450:	1885883a 	add	r2,r3,r2
    8454:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    8458:	e0fffc17 	ldw	r3,-16(fp)
    845c:	e0bffd17 	ldw	r2,-12(fp)
    8460:	1880182e 	bgeu	r3,r2,84c4 <altera_avalon_jtag_uart_read+0xac>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8464:	e0bffb17 	ldw	r2,-20(fp)
    8468:	10800037 	ldwio	r2,0(r2)
    846c:	e0bffe15 	stw	r2,-8(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8470:	e0bffe17 	ldw	r2,-8(fp)
    8474:	10a0000c 	andi	r2,r2,32768
    8478:	1005003a 	cmpeq	r2,r2,zero
    847c:	1000091e 	bne	r2,zero,84a4 <altera_avalon_jtag_uart_read+0x8c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8480:	e17ffc04 	addi	r5,fp,-16
    8484:	28c00017 	ldw	r3,0(r5)
    8488:	e0bffe17 	ldw	r2,-8(fp)
    848c:	1009883a 	mov	r4,r2
    8490:	1805883a 	mov	r2,r3
    8494:	11000005 	stb	r4,0(r2)
    8498:	18c00044 	addi	r3,r3,1
    849c:	28c00015 	stw	r3,0(r5)
    84a0:	003fed06 	br	8458 <altera_avalon_jtag_uart_read+0x40>
    else if (ptr != buffer)
    84a4:	e0fffc17 	ldw	r3,-16(fp)
    84a8:	e0bff817 	ldw	r2,-32(fp)
    84ac:	18800126 	beq	r3,r2,84b4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    84b0:	00000406 	br	84c4 <altera_avalon_jtag_uart_read+0xac>
    else if(flags & O_NONBLOCK)
    84b4:	e0bffa17 	ldw	r2,-24(fp)
    84b8:	1090000c 	andi	r2,r2,16384
    84bc:	1005003a 	cmpeq	r2,r2,zero
    84c0:	103fe51e 	bne	r2,zero,8458 <altera_avalon_jtag_uart_read+0x40>
      break;   
    
  }

  if (ptr != buffer)
    84c4:	e0fffc17 	ldw	r3,-16(fp)
    84c8:	e0bff817 	ldw	r2,-32(fp)
    84cc:	18800526 	beq	r3,r2,84e4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    84d0:	e0bffc17 	ldw	r2,-16(fp)
    84d4:	e0fff817 	ldw	r3,-32(fp)
    84d8:	10c5c83a 	sub	r2,r2,r3
    84dc:	e0bfff15 	stw	r2,-4(fp)
    84e0:	00000906 	br	8508 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    84e4:	e0bffa17 	ldw	r2,-24(fp)
    84e8:	1090000c 	andi	r2,r2,16384
    84ec:	1005003a 	cmpeq	r2,r2,zero
    84f0:	1000031e 	bne	r2,zero,8500 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    84f4:	00bffd44 	movi	r2,-11
    84f8:	e0bfff15 	stw	r2,-4(fp)
    84fc:	00000206 	br	8508 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    8500:	00bffec4 	movi	r2,-5
    8504:	e0bfff15 	stw	r2,-4(fp)
}
    8508:	e0bfff17 	ldw	r2,-4(fp)
    850c:	df000917 	ldw	fp,36(sp)
    8510:	dec00a04 	addi	sp,sp,40
    8514:	f800283a 	ret

00008518 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8518:	defff904 	addi	sp,sp,-28
    851c:	df000615 	stw	fp,24(sp)
    8520:	df000604 	addi	fp,sp,24
    8524:	e13ffa15 	stw	r4,-24(fp)
    8528:	e17ffb15 	stw	r5,-20(fp)
    852c:	e1bffc15 	stw	r6,-16(fp)
    8530:	e1fffd15 	stw	r7,-12(fp)
  unsigned int base = sp->base;
    8534:	e0bffa17 	ldw	r2,-24(fp)
    8538:	10800017 	ldw	r2,0(r2)
    853c:	e0bffe15 	stw	r2,-8(fp)

  const char * end = ptr + count;
    8540:	e0fffb17 	ldw	r3,-20(fp)
    8544:	e0bffc17 	ldw	r2,-16(fp)
    8548:	1885883a 	add	r2,r3,r2
    854c:	e0bfff15 	stw	r2,-4(fp)

  while (ptr < end)
    8550:	e0fffb17 	ldw	r3,-20(fp)
    8554:	e0bfff17 	ldw	r2,-4(fp)
    8558:	18800f2e 	bgeu	r3,r2,8598 <altera_avalon_jtag_uart_write+0x80>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    855c:	e0bffe17 	ldw	r2,-8(fp)
    8560:	10800104 	addi	r2,r2,4
    8564:	10800037 	ldwio	r2,0(r2)
    8568:	10bfffec 	andhi	r2,r2,65535
    856c:	1005003a 	cmpeq	r2,r2,zero
    8570:	103ff71e 	bne	r2,zero,8550 <altera_avalon_jtag_uart_write+0x38>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8574:	e13ffe17 	ldw	r4,-8(fp)
    8578:	e17ffb04 	addi	r5,fp,-20
    857c:	28800017 	ldw	r2,0(r5)
    8580:	1007883a 	mov	r3,r2
    8584:	18c00007 	ldb	r3,0(r3)
    8588:	20c00035 	stwio	r3,0(r4)
    858c:	10800044 	addi	r2,r2,1
    8590:	28800015 	stw	r2,0(r5)
    8594:	003fee06 	br	8550 <altera_avalon_jtag_uart_write+0x38>

  return count;
    8598:	e0bffc17 	ldw	r2,-16(fp)
}
    859c:	df000617 	ldw	fp,24(sp)
    85a0:	dec00704 	addi	sp,sp,28
    85a4:	f800283a 	ret

000085a8 <alt_avalon_timer_sc_irq>:
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    85a8:	defff904 	addi	sp,sp,-28
    85ac:	dfc00615 	stw	ra,24(sp)
    85b0:	df000515 	stw	fp,20(sp)
    85b4:	df000504 	addi	fp,sp,20
    85b8:	e13ffb15 	stw	r4,-20(fp)
    85bc:	e17ffc15 	stw	r5,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    85c0:	e0bffb17 	ldw	r2,-20(fp)
    85c4:	10000035 	stwio	zero,0(r2)
  
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    85c8:	e0bffb17 	ldw	r2,-20(fp)
    85cc:	10800104 	addi	r2,r2,4
    85d0:	10800037 	ldwio	r2,0(r2)
    85d4:	0005303a 	rdctl	r2,status
    85d8:	e0bfff15 	stw	r2,-4(fp)
    85dc:	e0ffff17 	ldw	r3,-4(fp)
    85e0:	00bfff84 	movi	r2,-2
    85e4:	1884703a 	and	r2,r3,r2
    85e8:	1001703a 	wrctl	status,r2
    85ec:	e0bfff17 	ldw	r2,-4(fp)
    85f0:	e0bffe15 	stw	r2,-8(fp)
    85f4:	e0bffe17 	ldw	r2,-8(fp)
    85f8:	e0bffd15 	stw	r2,-12(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    85fc:	0008f680 	call	8f68 <alt_tick>
    8600:	e0bffd17 	ldw	r2,-12(fp)
    8604:	e0bfff15 	stw	r2,-4(fp)
    8608:	e0bfff17 	ldw	r2,-4(fp)
    860c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    8610:	dfc00617 	ldw	ra,24(sp)
    8614:	df000517 	ldw	fp,20(sp)
    8618:	dec00704 	addi	sp,sp,28
    861c:	f800283a 	ret

00008620 <alt_avalon_timer_sc_init>:

/*
 * alt_avalon_timer_sc_init() is called to initialise the timer that will be 
 * used to provide the periodic system clock. This is called from the 
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    8620:	defff804 	addi	sp,sp,-32
    8624:	dfc00715 	stw	ra,28(sp)
    8628:	df000615 	stw	fp,24(sp)
    862c:	df000604 	addi	fp,sp,24
    8630:	e13ffa15 	stw	r4,-24(fp)
    8634:	e17ffb15 	stw	r5,-20(fp)
    8638:	e1bffc15 	stw	r6,-16(fp)
    863c:	e1fffd15 	stw	r7,-12(fp)
    8640:	e0bffd17 	ldw	r2,-12(fp)
    8644:	e0bffe15 	stw	r2,-8(fp)
    8648:	d0a00b17 	ldw	r2,-32724(gp)
    864c:	1004c03a 	cmpne	r2,r2,zero
    8650:	1000041e 	bne	r2,zero,8664 <alt_avalon_timer_sc_init+0x44>
    8654:	e0bffe17 	ldw	r2,-8(fp)
    8658:	d0a00b15 	stw	r2,-32724(gp)
    865c:	e03fff15 	stw	zero,-4(fp)
    8660:	00000206 	br	866c <alt_avalon_timer_sc_init+0x4c>
    8664:	00bfffc4 	movi	r2,-1
    8668:	e0bfff15 	stw	r2,-4(fp)
  /* set the system clock frequency */
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    866c:	e0bffa17 	ldw	r2,-24(fp)
    8670:	10800104 	addi	r2,r2,4
    8674:	1007883a 	mov	r3,r2
    8678:	008001c4 	movi	r2,7
    867c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    8680:	e13ffc17 	ldw	r4,-16(fp)
    8684:	e17ffa17 	ldw	r5,-24(fp)
    8688:	01800074 	movhi	r6,1
    868c:	31a16a04 	addi	r6,r6,-31320
    8690:	0008a3c0 	call	8a3c <alt_irq_register>
#endif  
}
    8694:	dfc00717 	ldw	ra,28(sp)
    8698:	df000617 	ldw	fp,24(sp)
    869c:	dec00804 	addi	sp,sp,32
    86a0:	f800283a 	ret

000086a4 <close>:
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    86a4:	defff804 	addi	sp,sp,-32
    86a8:	dfc00715 	stw	ra,28(sp)
    86ac:	df000615 	stw	fp,24(sp)
    86b0:	df000604 	addi	fp,sp,24
    86b4:	e13ffa15 	stw	r4,-24(fp)
  alt_fd* fd;
  int     rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    86b8:	e0bffa17 	ldw	r2,-24(fp)
    86bc:	1004803a 	cmplt	r2,r2,zero
    86c0:	1000091e 	bne	r2,zero,86e8 <close+0x44>
    86c4:	e0bffa17 	ldw	r2,-24(fp)
    86c8:	10800324 	muli	r2,r2,12
    86cc:	e0bffe15 	stw	r2,-8(fp)
    86d0:	00800074 	movhi	r2,1
    86d4:	10a52904 	addi	r2,r2,-27484
    86d8:	e0fffe17 	ldw	r3,-8(fp)
    86dc:	1887883a 	add	r3,r3,r2
    86e0:	e0fffe15 	stw	r3,-8(fp)
    86e4:	00000106 	br	86ec <close+0x48>
    86e8:	e03ffe15 	stw	zero,-8(fp)
    86ec:	e0bffe17 	ldw	r2,-8(fp)
    86f0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    86f4:	e0bffb17 	ldw	r2,-20(fp)
    86f8:	1005003a 	cmpeq	r2,r2,zero
    86fc:	10001d1e 	bne	r2,zero,8774 <close+0xd0>
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    8700:	e0bffb17 	ldw	r2,-20(fp)
    8704:	10800017 	ldw	r2,0(r2)
    8708:	10800417 	ldw	r2,16(r2)
    870c:	1005003a 	cmpeq	r2,r2,zero
    8710:	1000071e 	bne	r2,zero,8730 <close+0x8c>
    8714:	e0bffb17 	ldw	r2,-20(fp)
    8718:	10800017 	ldw	r2,0(r2)
    871c:	10800417 	ldw	r2,16(r2)
    8720:	e13ffb17 	ldw	r4,-20(fp)
    8724:	103ee83a 	callr	r2
    8728:	e0bfff15 	stw	r2,-4(fp)
    872c:	00000106 	br	8734 <close+0x90>
    8730:	e03fff15 	stw	zero,-4(fp)
    8734:	e0ffff17 	ldw	r3,-4(fp)
    8738:	e0fffc15 	stw	r3,-16(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    873c:	e13ffa17 	ldw	r4,-24(fp)
    8740:	0008e700 	call	8e70 <alt_release_fd>
    if (rval < 0)
    8744:	e0bffc17 	ldw	r2,-16(fp)
    8748:	1004403a 	cmpge	r2,r2,zero
    874c:	1000071e 	bne	r2,zero,876c <close+0xc8>
    {
      ALT_ERRNO = -rval;
    8750:	00087a00 	call	87a0 <alt_get_errno>
    8754:	e0fffc17 	ldw	r3,-16(fp)
    8758:	00c7c83a 	sub	r3,zero,r3
    875c:	10c00015 	stw	r3,0(r2)
      return -1;
    8760:	00bfffc4 	movi	r2,-1
    8764:	e0bffd15 	stw	r2,-12(fp)
    8768:	00000806 	br	878c <close+0xe8>
    }
    return 0;
    876c:	e03ffd15 	stw	zero,-12(fp)
    8770:	00000606 	br	878c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8774:	00087a00 	call	87a0 <alt_get_errno>
    8778:	1007883a 	mov	r3,r2
    877c:	00801444 	movi	r2,81
    8780:	18800015 	stw	r2,0(r3)
    return -1;
    8784:	00ffffc4 	movi	r3,-1
    8788:	e0fffd15 	stw	r3,-12(fp)
  }
}
    878c:	e0bffd17 	ldw	r2,-12(fp)
    8790:	dfc00717 	ldw	ra,28(sp)
    8794:	df000617 	ldw	fp,24(sp)
    8798:	dec00804 	addi	sp,sp,32
    879c:	f800283a 	ret

000087a0 <alt_get_errno>:
    87a0:	defffd04 	addi	sp,sp,-12
    87a4:	dfc00215 	stw	ra,8(sp)
    87a8:	df000115 	stw	fp,4(sp)
    87ac:	df000104 	addi	fp,sp,4
    87b0:	d0a00817 	ldw	r2,-32736(gp)
    87b4:	1005003a 	cmpeq	r2,r2,zero
    87b8:	1000041e 	bne	r2,zero,87cc <alt_get_errno+0x2c>
    87bc:	d0a00817 	ldw	r2,-32736(gp)
    87c0:	103ee83a 	callr	r2
    87c4:	e0bfff15 	stw	r2,-4(fp)
    87c8:	00000206 	br	87d4 <alt_get_errno+0x34>
    87cc:	d0a01004 	addi	r2,gp,-32704
    87d0:	e0bfff15 	stw	r2,-4(fp)
    87d4:	e0bfff17 	ldw	r2,-4(fp)
    87d8:	dfc00217 	ldw	ra,8(sp)
    87dc:	df000117 	ldw	fp,4(sp)
    87e0:	dec00304 	addi	sp,sp,12
    87e4:	f800283a 	ret

000087e8 <alt_dev_null_write>:
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    87e8:	defffc04 	addi	sp,sp,-16
    87ec:	df000315 	stw	fp,12(sp)
    87f0:	df000304 	addi	fp,sp,12
    87f4:	e13ffd15 	stw	r4,-12(fp)
    87f8:	e17ffe15 	stw	r5,-8(fp)
    87fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8800:	e0bfff17 	ldw	r2,-4(fp)
}
    8804:	df000317 	ldw	fp,12(sp)
    8808:	dec00404 	addi	sp,sp,16
    880c:	f800283a 	ret

00008810 <alt_dev_llist_insert>:
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8810:	defff904 	addi	sp,sp,-28
    8814:	dfc00615 	stw	ra,24(sp)
    8818:	df000515 	stw	fp,20(sp)
    881c:	df000504 	addi	fp,sp,20
    8820:	e13ffb15 	stw	r4,-20(fp)
    8824:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8828:	e0bffb17 	ldw	r2,-20(fp)
    882c:	1005003a 	cmpeq	r2,r2,zero
    8830:	1000041e 	bne	r2,zero,8844 <alt_dev_llist_insert+0x34>
    8834:	e0bffb17 	ldw	r2,-20(fp)
    8838:	10800217 	ldw	r2,8(r2)
    883c:	1004c03a 	cmpne	r2,r2,zero
    8840:	1000071e 	bne	r2,zero,8860 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    8844:	00088c00 	call	88c0 <alt_get_errno>
    8848:	1007883a 	mov	r3,r2
    884c:	00800584 	movi	r2,22
    8850:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    8854:	00bffa84 	movi	r2,-22
    8858:	e0bfff15 	stw	r2,-4(fp)
    885c:	00001306 	br	88ac <alt_dev_llist_insert+0x9c>
    8860:	e0bffc17 	ldw	r2,-16(fp)
    8864:	e0bffd15 	stw	r2,-12(fp)
    8868:	e0bffb17 	ldw	r2,-20(fp)
    886c:	e0bffe15 	stw	r2,-8(fp)
    8870:	e0fffe17 	ldw	r3,-8(fp)
    8874:	e0bffd17 	ldw	r2,-12(fp)
    8878:	18800115 	stw	r2,4(r3)
    887c:	e0fffe17 	ldw	r3,-8(fp)
    8880:	e0bffd17 	ldw	r2,-12(fp)
    8884:	10800017 	ldw	r2,0(r2)
    8888:	18800015 	stw	r2,0(r3)
    888c:	e0bffd17 	ldw	r2,-12(fp)
    8890:	10c00017 	ldw	r3,0(r2)
    8894:	e0bffe17 	ldw	r2,-8(fp)
    8898:	18800115 	stw	r2,4(r3)
    889c:	e0fffd17 	ldw	r3,-12(fp)
    88a0:	e0bffe17 	ldw	r2,-8(fp)
    88a4:	18800015 	stw	r2,0(r3)
  }
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    88a8:	e03fff15 	stw	zero,-4(fp)
}
    88ac:	e0bfff17 	ldw	r2,-4(fp)
    88b0:	dfc00617 	ldw	ra,24(sp)
    88b4:	df000517 	ldw	fp,20(sp)
    88b8:	dec00704 	addi	sp,sp,28
    88bc:	f800283a 	ret

000088c0 <alt_get_errno>:
    88c0:	defffd04 	addi	sp,sp,-12
    88c4:	dfc00215 	stw	ra,8(sp)
    88c8:	df000115 	stw	fp,4(sp)
    88cc:	df000104 	addi	fp,sp,4
    88d0:	d0a00817 	ldw	r2,-32736(gp)
    88d4:	1005003a 	cmpeq	r2,r2,zero
    88d8:	1000041e 	bne	r2,zero,88ec <alt_get_errno+0x2c>
    88dc:	d0a00817 	ldw	r2,-32736(gp)
    88e0:	103ee83a 	callr	r2
    88e4:	e0bfff15 	stw	r2,-4(fp)
    88e8:	00000206 	br	88f4 <alt_get_errno+0x34>
    88ec:	d0a01004 	addi	r2,gp,-32704
    88f0:	e0bfff15 	stw	r2,-4(fp)
    88f4:	e0bfff17 	ldw	r2,-4(fp)
    88f8:	dfc00217 	ldw	ra,8(sp)
    88fc:	df000117 	ldw	fp,4(sp)
    8900:	dec00304 	addi	sp,sp,12
    8904:	f800283a 	ret

00008908 <alt_open_fd>:
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8908:	defff904 	addi	sp,sp,-28
    890c:	dfc00615 	stw	ra,24(sp)
    8910:	df000515 	stw	fp,20(sp)
    8914:	df000504 	addi	fp,sp,20
    8918:	e13ffb15 	stw	r4,-20(fp)
    891c:	e17ffc15 	stw	r5,-16(fp)
    8920:	e1bffd15 	stw	r6,-12(fp)
    8924:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    8928:	e13ffc17 	ldw	r4,-16(fp)
    892c:	e17ffd17 	ldw	r5,-12(fp)
    8930:	e1bffe17 	ldw	r6,-8(fp)
    8934:	0008ca80 	call	8ca8 <open>
    8938:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    893c:	e0bfff17 	ldw	r2,-4(fp)
    8940:	1004803a 	cmplt	r2,r2,zero
    8944:	10001c1e 	bne	r2,zero,89b8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    8948:	e13ffb17 	ldw	r4,-20(fp)
    894c:	00c00074 	movhi	r3,1
    8950:	18e52904 	addi	r3,r3,-27484
    8954:	e0bfff17 	ldw	r2,-4(fp)
    8958:	10800324 	muli	r2,r2,12
    895c:	10c5883a 	add	r2,r2,r3
    8960:	10800017 	ldw	r2,0(r2)
    8964:	20800015 	stw	r2,0(r4)
    fd->priv     = alt_fd_list[old].priv;
    8968:	e13ffb17 	ldw	r4,-20(fp)
    896c:	00c00074 	movhi	r3,1
    8970:	18e52904 	addi	r3,r3,-27484
    8974:	e0bfff17 	ldw	r2,-4(fp)
    8978:	10800324 	muli	r2,r2,12
    897c:	10c5883a 	add	r2,r2,r3
    8980:	10800104 	addi	r2,r2,4
    8984:	10800017 	ldw	r2,0(r2)
    8988:	20800115 	stw	r2,4(r4)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    898c:	e13ffb17 	ldw	r4,-20(fp)
    8990:	00c00074 	movhi	r3,1
    8994:	18e52904 	addi	r3,r3,-27484
    8998:	e0bfff17 	ldw	r2,-4(fp)
    899c:	10800324 	muli	r2,r2,12
    89a0:	10c5883a 	add	r2,r2,r3
    89a4:	10800204 	addi	r2,r2,8
    89a8:	10800017 	ldw	r2,0(r2)
    89ac:	20800215 	stw	r2,8(r4)

    alt_release_fd (old);
    89b0:	e13fff17 	ldw	r4,-4(fp)
    89b4:	0008e700 	call	8e70 <alt_release_fd>
  }
} 
    89b8:	dfc00617 	ldw	ra,24(sp)
    89bc:	df000517 	ldw	fp,20(sp)
    89c0:	dec00704 	addi	sp,sp,28
    89c4:	f800283a 	ret

000089c8 <alt_io_redirect>:

/*
 * alt_io_redirect() is called once the device/filesystem lists have been 
 * initialised, but before main(). Its function is to redirect standard in,
 * standard out and standard error so that they point to the devices selected by
 * the user (as defined in system.h).
 *
 * Prior to the call to this function, io is directed towards /dev/null. If
 * i/o can not be redirected to the requested device, for example if the device 
 * does not exist, then it remains directed at /dev/null. 
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    89c8:	defffb04 	addi	sp,sp,-20
    89cc:	dfc00415 	stw	ra,16(sp)
    89d0:	df000315 	stw	fp,12(sp)
    89d4:	df000304 	addi	fp,sp,12
    89d8:	e13ffd15 	stw	r4,-12(fp)
    89dc:	e17ffe15 	stw	r5,-8(fp)
    89e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    89e4:	01000074 	movhi	r4,1
    89e8:	21252c04 	addi	r4,r4,-27472
    89ec:	e17ffd17 	ldw	r5,-12(fp)
    89f0:	01800044 	movi	r6,1
    89f4:	01c07fc4 	movi	r7,511
    89f8:	00089080 	call	8908 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    89fc:	01000074 	movhi	r4,1
    8a00:	21252904 	addi	r4,r4,-27484
    8a04:	e17ffe17 	ldw	r5,-8(fp)
    8a08:	000d883a 	mov	r6,zero
    8a0c:	01c07fc4 	movi	r7,511
    8a10:	00089080 	call	8908 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8a14:	01000074 	movhi	r4,1
    8a18:	21252f04 	addi	r4,r4,-27460
    8a1c:	e17fff17 	ldw	r5,-4(fp)
    8a20:	01800044 	movi	r6,1
    8a24:	01c07fc4 	movi	r7,511
    8a28:	00089080 	call	8908 <alt_open_fd>
}  
    8a2c:	dfc00417 	ldw	ra,16(sp)
    8a30:	df000317 	ldw	fp,12(sp)
    8a34:	dec00504 	addi	sp,sp,20
    8a38:	f800283a 	ret

00008a3c <alt_irq_register>:
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    8a3c:	defff304 	addi	sp,sp,-52
    8a40:	df000c15 	stw	fp,48(sp)
    8a44:	df000c04 	addi	fp,sp,48
    8a48:	e13ff415 	stw	r4,-48(fp)
    8a4c:	e17ff515 	stw	r5,-44(fp)
    8a50:	e1bff615 	stw	r6,-40(fp)
  int rc = -EINVAL;  
    8a54:	00bffa84 	movi	r2,-22
    8a58:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8a5c:	e0bff417 	ldw	r2,-48(fp)
    8a60:	10800828 	cmpgeui	r2,r2,32
    8a64:	10005a1e 	bne	r2,zero,8bd0 <alt_irq_register+0x194>
    8a68:	0005303a 	rdctl	r2,status
    8a6c:	e0bffa15 	stw	r2,-24(fp)
    8a70:	e0fffa17 	ldw	r3,-24(fp)
    8a74:	00bfff84 	movi	r2,-2
    8a78:	1884703a 	and	r2,r3,r2
    8a7c:	1001703a 	wrctl	status,r2
    8a80:	e0bffa17 	ldw	r2,-24(fp)
    8a84:	e0bff915 	stw	r2,-28(fp)
    8a88:	e0bff917 	ldw	r2,-28(fp)
    8a8c:	e0bff815 	stw	r2,-32(fp)
  {
    /* 
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    8a90:	00c00074 	movhi	r3,1
    8a94:	18e5af04 	addi	r3,r3,-26948
    8a98:	e0bff417 	ldw	r2,-48(fp)
    8a9c:	10800224 	muli	r2,r2,8
    8aa0:	10c7883a 	add	r3,r2,r3
    8aa4:	e0bff617 	ldw	r2,-40(fp)
    8aa8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    8aac:	00c00074 	movhi	r3,1
    8ab0:	18e5af04 	addi	r3,r3,-26948
    8ab4:	e0bff417 	ldw	r2,-48(fp)
    8ab8:	10800224 	muli	r2,r2,8
    8abc:	10c5883a 	add	r2,r2,r3
    8ac0:	10c00104 	addi	r3,r2,4
    8ac4:	e0bff517 	ldw	r2,-44(fp)
    8ac8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    8acc:	e0bff617 	ldw	r2,-40(fp)
    8ad0:	1005003a 	cmpeq	r2,r2,zero
    8ad4:	10001c1e 	bne	r2,zero,8b48 <alt_irq_register+0x10c>
    8ad8:	e0bff417 	ldw	r2,-48(fp)
    8adc:	e0bffa15 	stw	r2,-24(fp)
    8ae0:	0005303a 	rdctl	r2,status
    8ae4:	e0bffd15 	stw	r2,-12(fp)
    8ae8:	e0fffd17 	ldw	r3,-12(fp)
    8aec:	00bfff84 	movi	r2,-2
    8af0:	1884703a 	and	r2,r3,r2
    8af4:	1001703a 	wrctl	status,r2
    8af8:	e0bffd17 	ldw	r2,-12(fp)
    8afc:	e0bffc15 	stw	r2,-16(fp)
    8b00:	e0bffc17 	ldw	r2,-16(fp)
    8b04:	e0bffb15 	stw	r2,-20(fp)
    8b08:	00c00044 	movi	r3,1
    8b0c:	e0bffa17 	ldw	r2,-24(fp)
    8b10:	1886983a 	sll	r3,r3,r2
    8b14:	d0a00917 	ldw	r2,-32732(gp)
    8b18:	10c4b03a 	or	r2,r2,r3
    8b1c:	d0a00915 	stw	r2,-32732(gp)
    8b20:	d0a00917 	ldw	r2,-32732(gp)
    8b24:	100170fa 	wrctl	ienable,r2
    8b28:	e0bffb17 	ldw	r2,-20(fp)
    8b2c:	e0bffd15 	stw	r2,-12(fp)
    8b30:	e0bffd17 	ldw	r2,-12(fp)
    8b34:	1001703a 	wrctl	status,r2
    8b38:	e03ff915 	stw	zero,-28(fp)
    8b3c:	e0bff917 	ldw	r2,-28(fp)
    8b40:	e0bfff15 	stw	r2,-4(fp)
    8b44:	00001c06 	br	8bb8 <alt_irq_register+0x17c>
    8b48:	e0bff417 	ldw	r2,-48(fp)
    8b4c:	e0bffd15 	stw	r2,-12(fp)
    8b50:	0005303a 	rdctl	r2,status
    8b54:	e0bffe15 	stw	r2,-8(fp)
    8b58:	e0fffe17 	ldw	r3,-8(fp)
    8b5c:	00bfff84 	movi	r2,-2
    8b60:	1884703a 	and	r2,r3,r2
    8b64:	1001703a 	wrctl	status,r2
    8b68:	e0bffe17 	ldw	r2,-8(fp)
    8b6c:	e0bffa15 	stw	r2,-24(fp)
    8b70:	e0bffa17 	ldw	r2,-24(fp)
    8b74:	e0bffb15 	stw	r2,-20(fp)
    8b78:	00c00044 	movi	r3,1
    8b7c:	e0bffd17 	ldw	r2,-12(fp)
    8b80:	1884983a 	sll	r2,r3,r2
    8b84:	0086303a 	nor	r3,zero,r2
    8b88:	d0a00917 	ldw	r2,-32732(gp)
    8b8c:	10c4703a 	and	r2,r2,r3
    8b90:	d0a00915 	stw	r2,-32732(gp)
    8b94:	d0a00917 	ldw	r2,-32732(gp)
    8b98:	100170fa 	wrctl	ienable,r2
    8b9c:	e0bffb17 	ldw	r2,-20(fp)
    8ba0:	e0bffe15 	stw	r2,-8(fp)
    8ba4:	e0bffe17 	ldw	r2,-8(fp)
    8ba8:	1001703a 	wrctl	status,r2
    8bac:	e03ffc15 	stw	zero,-16(fp)
    8bb0:	e0bffc17 	ldw	r2,-16(fp)
    8bb4:	e0bfff15 	stw	r2,-4(fp)
    8bb8:	e0bfff17 	ldw	r2,-4(fp)
    8bbc:	e0bff715 	stw	r2,-36(fp)
    8bc0:	e0bff817 	ldw	r2,-32(fp)
    8bc4:	e0bffe15 	stw	r2,-8(fp)
    8bc8:	e0bffe17 	ldw	r2,-8(fp)
    8bcc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    8bd0:	e0bff717 	ldw	r2,-36(fp)
}
    8bd4:	df000c17 	ldw	fp,48(sp)
    8bd8:	dec00d04 	addi	sp,sp,52
    8bdc:	f800283a 	ret

00008be0 <alt_file_locked>:
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8be0:	defffc04 	addi	sp,sp,-16
    8be4:	df000315 	stw	fp,12(sp)
    8be8:	df000304 	addi	fp,sp,12
    8bec:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 i;

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8bf0:	e0fffd17 	ldw	r3,-12(fp)
    8bf4:	e0bffd17 	ldw	r2,-12(fp)
    8bf8:	10800217 	ldw	r2,8(r2)
    8bfc:	10900034 	orhi	r2,r2,16384
    8c00:	18800215 	stw	r2,8(r3)

  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8c04:	e03ffe15 	stw	zero,-8(fp)
    8c08:	d0e00717 	ldw	r3,-32740(gp)
    8c0c:	e0bffe17 	ldw	r2,-8(fp)
    8c10:	18802036 	bltu	r3,r2,8c94 <alt_file_locked+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8c14:	00c00074 	movhi	r3,1
    8c18:	18e52904 	addi	r3,r3,-27484
    8c1c:	e0bffe17 	ldw	r2,-8(fp)
    8c20:	10800324 	muli	r2,r2,12
    8c24:	10c5883a 	add	r2,r2,r3
    8c28:	e0fffd17 	ldw	r3,-12(fp)
    8c2c:	11000017 	ldw	r4,0(r2)
    8c30:	18800017 	ldw	r2,0(r3)
    8c34:	2080131e 	bne	r4,r2,8c84 <alt_file_locked+0xa4>
    8c38:	00c00074 	movhi	r3,1
    8c3c:	18e52904 	addi	r3,r3,-27484
    8c40:	e0bffe17 	ldw	r2,-8(fp)
    8c44:	10800324 	muli	r2,r2,12
    8c48:	10c5883a 	add	r2,r2,r3
    8c4c:	10800204 	addi	r2,r2,8
    8c50:	10800017 	ldw	r2,0(r2)
    8c54:	1004403a 	cmpge	r2,r2,zero
    8c58:	10000a1e 	bne	r2,zero,8c84 <alt_file_locked+0xa4>
    8c5c:	e0bffe17 	ldw	r2,-8(fp)
    8c60:	10c00324 	muli	r3,r2,12
    8c64:	00800074 	movhi	r2,1
    8c68:	10a52904 	addi	r2,r2,-27484
    8c6c:	1887883a 	add	r3,r3,r2
    8c70:	e0bffd17 	ldw	r2,-12(fp)
    8c74:	18800326 	beq	r3,r2,8c84 <alt_file_locked+0xa4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8c78:	00bffcc4 	movi	r2,-13
    8c7c:	e0bfff15 	stw	r2,-4(fp)
    8c80:	00000506 	br	8c98 <alt_file_locked+0xb8>
    8c84:	e0bffe17 	ldw	r2,-8(fp)
    8c88:	10800044 	addi	r2,r2,1
    8c8c:	e0bffe15 	stw	r2,-8(fp)
    8c90:	003fdd06 	br	8c08 <alt_file_locked+0x28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8c94:	e03fff15 	stw	zero,-4(fp)
}
    8c98:	e0bfff17 	ldw	r2,-4(fp)
    8c9c:	df000317 	ldw	fp,12(sp)
    8ca0:	dec00404 	addi	sp,sp,16
    8ca4:	f800283a 	ret

00008ca8 <open>:

/*
 * open() is called in order to get a file descriptor that reference the file
 * or device named "name". This descriptor can then be used to manipulate the
 * file/device using the standard system calls, e.g. write(), read(), ioctl()
 * etc.
 *
 * This is equivalent to the standard open() system call.
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8ca8:	defff404 	addi	sp,sp,-48
    8cac:	dfc00b15 	stw	ra,44(sp)
    8cb0:	df000a15 	stw	fp,40(sp)
    8cb4:	df000a04 	addi	fp,sp,40
    8cb8:	e13ff615 	stw	r4,-40(fp)
    8cbc:	e17ff715 	stw	r5,-36(fp)
    8cc0:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8cc4:	00bfffc4 	movi	r2,-1
    8cc8:	e0bffb15 	stw	r2,-20(fp)
  int status = -ENODEV;
    8ccc:	00bffb44 	movi	r2,-19
    8cd0:	e0bffc15 	stw	r2,-16(fp)
  int isafs = 0;
    8cd4:	e03ffd15 	stw	zero,-12(fp)

  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8cd8:	e13ff617 	ldw	r4,-40(fp)
    8cdc:	d1600504 	addi	r5,gp,-32748
    8ce0:	00090840 	call	9084 <alt_find_dev>
    8ce4:	e0bff915 	stw	r2,-28(fp)
    8ce8:	e0bff917 	ldw	r2,-28(fp)
    8cec:	1004c03a 	cmpne	r2,r2,zero
    8cf0:	1000051e 	bne	r2,zero,8d08 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8cf4:	e13ff617 	ldw	r4,-40(fp)
    8cf8:	00091140 	call	9114 <alt_find_file>
    8cfc:	e0bff915 	stw	r2,-28(fp)
    isafs = 1;
    8d00:	00800044 	movi	r2,1
    8d04:	e0bffd15 	stw	r2,-12(fp)
  }

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8d08:	e0bff917 	ldw	r2,-28(fp)
    8d0c:	1005003a 	cmpeq	r2,r2,zero
    8d10:	1000301e 	bne	r2,zero,8dd4 <open+0x12c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8d14:	e13ff917 	ldw	r4,-28(fp)
    8d18:	00091f80 	call	91f8 <alt_get_fd>
    8d1c:	e0bffb15 	stw	r2,-20(fp)
    8d20:	e0bffb17 	ldw	r2,-20(fp)
    8d24:	1004403a 	cmpge	r2,r2,zero
    8d28:	1000031e 	bne	r2,zero,8d38 <open+0x90>
    {
      status = index;
    8d2c:	e0bffb17 	ldw	r2,-20(fp)
    8d30:	e0bffc15 	stw	r2,-16(fp)
    8d34:	00002906 	br	8ddc <open+0x134>
    }
    else
    {
      fd = &alt_fd_list[index];
    8d38:	e0bffb17 	ldw	r2,-20(fp)
    8d3c:	10c00324 	muli	r3,r2,12
    8d40:	00800074 	movhi	r2,1
    8d44:	10a52904 	addi	r2,r2,-27484
    8d48:	1885883a 	add	r2,r3,r2
    8d4c:	e0bffa15 	stw	r2,-24(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8d50:	e13ffa17 	ldw	r4,-24(fp)
    8d54:	e0fff717 	ldw	r3,-36(fp)
    8d58:	00900034 	movhi	r2,16384
    8d5c:	10bfffc4 	addi	r2,r2,-1
    8d60:	1884703a 	and	r2,r3,r2
    8d64:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8d68:	e0bffd17 	ldw	r2,-12(fp)
    8d6c:	1004c03a 	cmpne	r2,r2,zero
    8d70:	1000071e 	bne	r2,zero,8d90 <open+0xe8>
    8d74:	e13ffa17 	ldw	r4,-24(fp)
    8d78:	0008be00 	call	8be0 <alt_file_locked>
    8d7c:	e0bffc15 	stw	r2,-16(fp)
    8d80:	e0bffc17 	ldw	r2,-16(fp)
    8d84:	1004403a 	cmpge	r2,r2,zero
    8d88:	1000011e 	bne	r2,zero,8d90 <open+0xe8>
    8d8c:	00001306 	br	8ddc <open+0x134>
      {
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8d90:	e0bff917 	ldw	r2,-28(fp)
    8d94:	10800317 	ldw	r2,12(r2)
    8d98:	1005003a 	cmpeq	r2,r2,zero
    8d9c:	1000091e 	bne	r2,zero,8dc4 <open+0x11c>
    8da0:	e0bff917 	ldw	r2,-28(fp)
    8da4:	10800317 	ldw	r2,12(r2)
    8da8:	e13ffa17 	ldw	r4,-24(fp)
    8dac:	e17ff617 	ldw	r5,-40(fp)
    8db0:	e1bff717 	ldw	r6,-36(fp)
    8db4:	e1fff817 	ldw	r7,-32(fp)
    8db8:	103ee83a 	callr	r2
    8dbc:	e0bfff15 	stw	r2,-4(fp)
    8dc0:	00000106 	br	8dc8 <open+0x120>
    8dc4:	e03fff15 	stw	zero,-4(fp)
    8dc8:	e0bfff17 	ldw	r2,-4(fp)
    8dcc:	e0bffc15 	stw	r2,-16(fp)
    8dd0:	00000206 	br	8ddc <open+0x134>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8dd4:	00bffb44 	movi	r2,-19
    8dd8:	e0bffc15 	stw	r2,-16(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8ddc:	e0bffc17 	ldw	r2,-16(fp)
    8de0:	1004403a 	cmpge	r2,r2,zero
    8de4:	1000091e 	bne	r2,zero,8e0c <open+0x164>
  {
    alt_release_fd (index);  
    8de8:	e13ffb17 	ldw	r4,-20(fp)
    8dec:	0008e700 	call	8e70 <alt_release_fd>
    ALT_ERRNO = -status;
    8df0:	0008e280 	call	8e28 <alt_get_errno>
    8df4:	e0fffc17 	ldw	r3,-16(fp)
    8df8:	00c7c83a 	sub	r3,zero,r3
    8dfc:	10c00015 	stw	r3,0(r2)
    return -1;
    8e00:	00bfffc4 	movi	r2,-1
    8e04:	e0bffe15 	stw	r2,-8(fp)
    8e08:	00000206 	br	8e14 <open+0x16c>
  }
  
  /* return the reference upon success */

  return index;
    8e0c:	e0bffb17 	ldw	r2,-20(fp)
    8e10:	e0bffe15 	stw	r2,-8(fp)
}
    8e14:	e0bffe17 	ldw	r2,-8(fp)
    8e18:	dfc00b17 	ldw	ra,44(sp)
    8e1c:	df000a17 	ldw	fp,40(sp)
    8e20:	dec00c04 	addi	sp,sp,48
    8e24:	f800283a 	ret

00008e28 <alt_get_errno>:
    8e28:	defffd04 	addi	sp,sp,-12
    8e2c:	dfc00215 	stw	ra,8(sp)
    8e30:	df000115 	stw	fp,4(sp)
    8e34:	df000104 	addi	fp,sp,4
    8e38:	d0a00817 	ldw	r2,-32736(gp)
    8e3c:	1005003a 	cmpeq	r2,r2,zero
    8e40:	1000041e 	bne	r2,zero,8e54 <alt_get_errno+0x2c>
    8e44:	d0a00817 	ldw	r2,-32736(gp)
    8e48:	103ee83a 	callr	r2
    8e4c:	e0bfff15 	stw	r2,-4(fp)
    8e50:	00000206 	br	8e5c <alt_get_errno+0x34>
    8e54:	d0a01004 	addi	r2,gp,-32704
    8e58:	e0bfff15 	stw	r2,-4(fp)
    8e5c:	e0bfff17 	ldw	r2,-4(fp)
    8e60:	dfc00217 	ldw	ra,8(sp)
    8e64:	df000117 	ldw	fp,4(sp)
    8e68:	dec00304 	addi	sp,sp,12
    8e6c:	f800283a 	ret

00008e70 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8e70:	defffe04 	addi	sp,sp,-8
    8e74:	df000115 	stw	fp,4(sp)
    8e78:	df000104 	addi	fp,sp,4
    8e7c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8e80:	e0bfff17 	ldw	r2,-4(fp)
    8e84:	108000d0 	cmplti	r2,r2,3
    8e88:	10000d1e 	bne	r2,zero,8ec0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    8e8c:	00c00074 	movhi	r3,1
    8e90:	18e52904 	addi	r3,r3,-27484
    8e94:	e0bfff17 	ldw	r2,-4(fp)
    8e98:	10800324 	muli	r2,r2,12
    8e9c:	10c5883a 	add	r2,r2,r3
    8ea0:	10800204 	addi	r2,r2,8
    8ea4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8ea8:	00c00074 	movhi	r3,1
    8eac:	18e52904 	addi	r3,r3,-27484
    8eb0:	e0bfff17 	ldw	r2,-4(fp)
    8eb4:	10800324 	muli	r2,r2,12
    8eb8:	10c5883a 	add	r2,r2,r3
    8ebc:	10000015 	stw	zero,0(r2)
  }
}
    8ec0:	df000117 	ldw	fp,4(sp)
    8ec4:	dec00204 	addi	sp,sp,8
    8ec8:	f800283a 	ret

00008ecc <alt_alarm_stop>:
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    8ecc:	defffb04 	addi	sp,sp,-20
    8ed0:	df000415 	stw	fp,16(sp)
    8ed4:	df000404 	addi	fp,sp,16
    8ed8:	e13ffc15 	stw	r4,-16(fp)
    8edc:	0005303a 	rdctl	r2,status
    8ee0:	e0bfff15 	stw	r2,-4(fp)
    8ee4:	e0ffff17 	ldw	r3,-4(fp)
    8ee8:	00bfff84 	movi	r2,-2
    8eec:	1884703a 	and	r2,r3,r2
    8ef0:	1001703a 	wrctl	status,r2
    8ef4:	e0bfff17 	ldw	r2,-4(fp)
    8ef8:	e0bffe15 	stw	r2,-8(fp)
    8efc:	e0bffe17 	ldw	r2,-8(fp)
    8f00:	e0bffd15 	stw	r2,-12(fp)
    8f04:	e0bffc17 	ldw	r2,-16(fp)
    8f08:	e0bfff15 	stw	r2,-4(fp)
    8f0c:	e0bfff17 	ldw	r2,-4(fp)
    8f10:	10c00017 	ldw	r3,0(r2)
    8f14:	e0bfff17 	ldw	r2,-4(fp)
    8f18:	10800117 	ldw	r2,4(r2)
    8f1c:	18800115 	stw	r2,4(r3)
    8f20:	e0bfff17 	ldw	r2,-4(fp)
    8f24:	10c00117 	ldw	r3,4(r2)
    8f28:	e0bfff17 	ldw	r2,-4(fp)
    8f2c:	10800017 	ldw	r2,0(r2)
    8f30:	18800015 	stw	r2,0(r3)
    8f34:	e0ffff17 	ldw	r3,-4(fp)
    8f38:	e0bfff17 	ldw	r2,-4(fp)
    8f3c:	18800115 	stw	r2,4(r3)
    8f40:	e0ffff17 	ldw	r3,-4(fp)
    8f44:	e0bfff17 	ldw	r2,-4(fp)
    8f48:	18800015 	stw	r2,0(r3)
    8f4c:	e0bffd17 	ldw	r2,-12(fp)
    8f50:	e0bfff15 	stw	r2,-4(fp)
    8f54:	e0bfff17 	ldw	r2,-4(fp)
    8f58:	1001703a 	wrctl	status,r2
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    8f5c:	df000417 	ldw	fp,16(sp)
    8f60:	dec00504 	addi	sp,sp,20
    8f64:	f800283a 	ret

00008f68 <alt_tick>:

/*
 * alt_tick() is periodically called by the system clock driver in order to
 * process the registered list of alarms. Each alarm is registed with a
 * callback interval, and a callback function, "callback". 
 *
 * The return value of the callback function indicates how many ticks are to
 * elapse until the next callback. A return value of zero indicates that the
 * alarm should be deactivated. 
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    8f68:	defffb04 	addi	sp,sp,-20
    8f6c:	dfc00415 	stw	ra,16(sp)
    8f70:	df000315 	stw	fp,12(sp)
    8f74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    8f78:	d0a00d17 	ldw	r2,-32716(gp)
    8f7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    8f80:	d0a00c17 	ldw	r2,-32720(gp)
    8f84:	10800044 	addi	r2,r2,1
    8f88:	d0a00c15 	stw	r2,-32720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    8f8c:	e0fffe17 	ldw	r3,-8(fp)
    8f90:	d0a00d04 	addi	r2,gp,-32716
    8f94:	18803026 	beq	r3,r2,9058 <alt_tick+0xf0>
  {
    next = (alt_alarm*) alarm->llist.next;
    8f98:	e0bffe17 	ldw	r2,-8(fp)
    8f9c:	10800017 	ldw	r2,0(r2)
    8fa0:	e0bffd15 	stw	r2,-12(fp)

    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    8fa4:	e0bffe17 	ldw	r2,-8(fp)
    8fa8:	10800403 	ldbu	r2,16(r2)
    8fac:	1005003a 	cmpeq	r2,r2,zero
    8fb0:	1000051e 	bne	r2,zero,8fc8 <alt_tick+0x60>
    8fb4:	d0a00c17 	ldw	r2,-32720(gp)
    8fb8:	1004c03a 	cmpne	r2,r2,zero
    8fbc:	1000021e 	bne	r2,zero,8fc8 <alt_tick+0x60>
    {
      alarm->rollover = 0;
    8fc0:	e0bffe17 	ldw	r2,-8(fp)
    8fc4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    8fc8:	e0bffe17 	ldw	r2,-8(fp)
    8fcc:	10c00217 	ldw	r3,8(r2)
    8fd0:	d0a00c17 	ldw	r2,-32720(gp)
    8fd4:	10c01d36 	bltu	r2,r3,904c <alt_tick+0xe4>
    8fd8:	e0bffe17 	ldw	r2,-8(fp)
    8fdc:	10800403 	ldbu	r2,16(r2)
    8fe0:	1004c03a 	cmpne	r2,r2,zero
    8fe4:	1000191e 	bne	r2,zero,904c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    8fe8:	e0bffe17 	ldw	r2,-8(fp)
    8fec:	e0fffe17 	ldw	r3,-8(fp)
    8ff0:	10800317 	ldw	r2,12(r2)
    8ff4:	19000517 	ldw	r4,20(r3)
    8ff8:	103ee83a 	callr	r2
    8ffc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	1004c03a 	cmpne	r2,r2,zero
    9008:	1000031e 	bne	r2,zero,9018 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    900c:	e13ffe17 	ldw	r4,-8(fp)
    9010:	0008ecc0 	call	8ecc <alt_alarm_stop>
    9014:	00000d06 	br	904c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    9018:	e13ffe17 	ldw	r4,-8(fp)
    901c:	e0bffe17 	ldw	r2,-8(fp)
    9020:	10c00217 	ldw	r3,8(r2)
    9024:	e0bfff17 	ldw	r2,-4(fp)
    9028:	1885883a 	add	r2,r3,r2
    902c:	20800215 	stw	r2,8(r4)
        
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9030:	e0bffe17 	ldw	r2,-8(fp)
    9034:	10c00217 	ldw	r3,8(r2)
    9038:	d0a00c17 	ldw	r2,-32720(gp)
    903c:	1880032e 	bgeu	r3,r2,904c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    9040:	e0fffe17 	ldw	r3,-8(fp)
    9044:	00800044 	movi	r2,1
    9048:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    904c:	e0bffd17 	ldw	r2,-12(fp)
    9050:	e0bffe15 	stw	r2,-8(fp)
    9054:	003fcd06 	br	8f8c <alt_tick+0x24>
  }

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9058:	dfc00417 	ldw	ra,16(sp)
    905c:	df000317 	ldw	fp,12(sp)
    9060:	dec00504 	addi	sp,sp,20
    9064:	f800283a 	ret

00009068 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    9068:	deffff04 	addi	sp,sp,-4
    906c:	df000015 	stw	fp,0(sp)
    9070:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9074:	000170fa 	wrctl	ienable,zero
}
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00104 	addi	sp,sp,4
    9080:	f800283a 	ret

00009084 <alt_find_dev>:
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9084:	defff904 	addi	sp,sp,-28
    9088:	dfc00615 	stw	ra,24(sp)
    908c:	df000515 	stw	fp,20(sp)
    9090:	df000504 	addi	fp,sp,20
    9094:	e13ffb15 	stw	r4,-20(fp)
    9098:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    909c:	e0bffc17 	ldw	r2,-16(fp)
    90a0:	10800017 	ldw	r2,0(r2)
    90a4:	e0bffd15 	stw	r2,-12(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    90a8:	e13ffb17 	ldw	r4,-20(fp)
    90ac:	00093ac0 	call	93ac <strlen>
    90b0:	10800044 	addi	r2,r2,1
    90b4:	e0bffe15 	stw	r2,-8(fp)

  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    90b8:	e0fffd17 	ldw	r3,-12(fp)
    90bc:	e0bffc17 	ldw	r2,-16(fp)
    90c0:	18800e26 	beq	r3,r2,90fc <alt_find_dev+0x78>
  {

    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    90c4:	e0bffd17 	ldw	r2,-12(fp)
    90c8:	11000217 	ldw	r4,8(r2)
    90cc:	e17ffb17 	ldw	r5,-20(fp)
    90d0:	e1bffe17 	ldw	r6,-8(fp)
    90d4:	00093700 	call	9370 <memcmp>
    90d8:	1004c03a 	cmpne	r2,r2,zero
    90dc:	1000031e 	bne	r2,zero,90ec <alt_find_dev+0x68>
    {
      /* match found */

      return next;
    90e0:	e0bffd17 	ldw	r2,-12(fp)
    90e4:	e0bfff15 	stw	r2,-4(fp)
    90e8:	00000506 	br	9100 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    90ec:	e0bffd17 	ldw	r2,-12(fp)
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	e0bffd15 	stw	r2,-12(fp)
    90f8:	003fef06 	br	90b8 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
    90fc:	e03fff15 	stw	zero,-4(fp)
}
    9100:	e0bfff17 	ldw	r2,-4(fp)
    9104:	dfc00617 	ldw	ra,24(sp)
    9108:	df000517 	ldw	fp,20(sp)
    910c:	dec00704 	addi	sp,sp,28
    9110:	f800283a 	ret

00009114 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9114:	defffa04 	addi	sp,sp,-24
    9118:	dfc00515 	stw	ra,20(sp)
    911c:	df000415 	stw	fp,16(sp)
    9120:	df000404 	addi	fp,sp,16
    9124:	e13ffc15 	stw	r4,-16(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9128:	d0a00317 	ldw	r2,-32756(gp)
    912c:	e0bffd15 	stw	r2,-12(fp)

  alt_32 len;
 
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9130:	e0fffd17 	ldw	r3,-12(fp)
    9134:	d0a00304 	addi	r2,gp,-32756
    9138:	18802926 	beq	r3,r2,91e0 <alt_find_file+0xcc>
  {
    len = strlen(next->name);
    913c:	e0bffd17 	ldw	r2,-12(fp)
    9140:	11000217 	ldw	r4,8(r2)
    9144:	00093ac0 	call	93ac <strlen>
    9148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    914c:	e0bffd17 	ldw	r2,-12(fp)
    9150:	10c00217 	ldw	r3,8(r2)
    9154:	e0bffe17 	ldw	r2,-8(fp)
    9158:	1885883a 	add	r2,r3,r2
    915c:	10bfffc4 	addi	r2,r2,-1
    9160:	10800007 	ldb	r2,0(r2)
    9164:	10800bd8 	cmpnei	r2,r2,47
    9168:	1000031e 	bne	r2,zero,9178 <alt_find_file+0x64>
    {
      len -= 1;
    916c:	e0bffe17 	ldw	r2,-8(fp)
    9170:	10bfffc4 	addi	r2,r2,-1
    9174:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9178:	e0fffc17 	ldw	r3,-16(fp)
    917c:	e0bffe17 	ldw	r2,-8(fp)
    9180:	1885883a 	add	r2,r3,r2
    9184:	10800007 	ldb	r2,0(r2)
    9188:	10800be0 	cmpeqi	r2,r2,47
    918c:	1000061e 	bne	r2,zero,91a8 <alt_find_file+0x94>
    9190:	e0fffc17 	ldw	r3,-16(fp)
    9194:	e0bffe17 	ldw	r2,-8(fp)
    9198:	1885883a 	add	r2,r3,r2
    919c:	10800007 	ldb	r2,0(r2)
    91a0:	1004c03a 	cmpne	r2,r2,zero
    91a4:	10000a1e 	bne	r2,zero,91d0 <alt_find_file+0xbc>
    91a8:	e0bffd17 	ldw	r2,-12(fp)
    91ac:	11000217 	ldw	r4,8(r2)
    91b0:	e17ffc17 	ldw	r5,-16(fp)
    91b4:	e1bffe17 	ldw	r6,-8(fp)
    91b8:	00093700 	call	9370 <memcmp>
    91bc:	1004c03a 	cmpne	r2,r2,zero
    91c0:	1000031e 	bne	r2,zero,91d0 <alt_find_file+0xbc>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    91c4:	e0bffd17 	ldw	r2,-12(fp)
    91c8:	e0bfff15 	stw	r2,-4(fp)
    91cc:	00000506 	br	91e4 <alt_find_file+0xd0>
    }
    next = (alt_dev*) next->llist.next;
    91d0:	e0bffd17 	ldw	r2,-12(fp)
    91d4:	10800017 	ldw	r2,0(r2)
    91d8:	e0bffd15 	stw	r2,-12(fp)
    91dc:	003fd406 	br	9130 <alt_find_file+0x1c>
  }
  
  /* No match found */
  
  return NULL;     
    91e0:	e03fff15 	stw	zero,-4(fp)
}
    91e4:	e0bfff17 	ldw	r2,-4(fp)
    91e8:	dfc00517 	ldw	ra,20(sp)
    91ec:	df000417 	ldw	fp,16(sp)
    91f0:	dec00604 	addi	sp,sp,24
    91f4:	f800283a 	ret

000091f8 <alt_get_fd>:
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    91f8:	defffa04 	addi	sp,sp,-24
    91fc:	df000515 	stw	fp,20(sp)
    9200:	df000504 	addi	fp,sp,20
    9204:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
    9208:	00bffa04 	movi	r2,-24
    920c:	e0bffd15 	stw	r2,-12(fp)
    9210:	e03ffe15 	stw	zero,-8(fp)
  
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  
  /* 
   * Search through the list of file descriptors, and allocate the first
   * free descriptor that's found. 
   *
   * If a free descriptor is found, then the value of "alt_max_fd" is 
   * updated accordingly. "alt_max_fd" is a 'highwater mark' which 
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9214:	e03ffc15 	stw	zero,-16(fp)
    9218:	e0bffc17 	ldw	r2,-16(fp)
    921c:	10800808 	cmpgei	r2,r2,32
    9220:	10001b1e 	bne	r2,zero,9290 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    9224:	00c00074 	movhi	r3,1
    9228:	18e52904 	addi	r3,r3,-27484
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	10800324 	muli	r2,r2,12
    9234:	10c5883a 	add	r2,r2,r3
    9238:	10800017 	ldw	r2,0(r2)
    923c:	1004c03a 	cmpne	r2,r2,zero
    9240:	10000f1e 	bne	r2,zero,9280 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    9244:	00c00074 	movhi	r3,1
    9248:	18e52904 	addi	r3,r3,-27484
    924c:	e0bffc17 	ldw	r2,-16(fp)
    9250:	10800324 	muli	r2,r2,12
    9254:	10c7883a 	add	r3,r2,r3
    9258:	e0bffb17 	ldw	r2,-20(fp)
    925c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    9260:	e0fffc17 	ldw	r3,-16(fp)
    9264:	d0a00717 	ldw	r2,-32740(gp)
    9268:	10c0020e 	bge	r2,r3,9274 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    926c:	e0bffc17 	ldw	r2,-16(fp)
    9270:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
    9274:	e0bffc17 	ldw	r2,-16(fp)
    9278:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    927c:	00000406 	br	9290 <alt_get_fd+0x98>
    9280:	e0bffc17 	ldw	r2,-16(fp)
    9284:	10800044 	addi	r2,r2,1
    9288:	e0bffc15 	stw	r2,-16(fp)
    928c:	003fe206 	br	9218 <alt_get_fd+0x20>
    9290:	e03fff15 	stw	zero,-4(fp)
    }
  }

 alt_get_fd_exit:

  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9294:	e0bffd17 	ldw	r2,-12(fp)
}
    9298:	df000517 	ldw	fp,20(sp)
    929c:	dec00604 	addi	sp,sp,24
    92a0:	f800283a 	ret

000092a4 <exit>:
    92a4:	d0a00f17 	ldw	r2,-32708(gp)
    92a8:	defff804 	addi	sp,sp,-32
    92ac:	dd800015 	stw	r22,0(sp)
    92b0:	dfc00715 	stw	ra,28(sp)
    92b4:	dc000615 	stw	r16,24(sp)
    92b8:	dc400515 	stw	r17,20(sp)
    92bc:	dc800415 	stw	r18,16(sp)
    92c0:	dcc00315 	stw	r19,12(sp)
    92c4:	dd000215 	stw	r20,8(sp)
    92c8:	dd400115 	stw	r21,4(sp)
    92cc:	15000c17 	ldw	r20,48(r2)
    92d0:	202d883a 	mov	r22,r4
    92d4:	a0002426 	beq	r20,zero,9368 <exit+0xc4>
    92d8:	a0800117 	ldw	r2,4(r20)
    92dc:	a5402204 	addi	r21,r20,136
    92e0:	0027883a 	mov	r19,zero
    92e4:	143fffc4 	addi	r16,r2,-1
    92e8:	8006803a 	cmplt	r3,r16,zero
    92ec:	1800021e 	bne	r3,zero,92f8 <exit+0x54>
    92f0:	00800044 	movi	r2,1
    92f4:	1426983a 	sll	r19,r2,r16
    92f8:	1800191e 	bne	r3,zero,9360 <exit+0xbc>
    92fc:	800490ba 	slli	r2,r16,2
    9300:	1025883a 	mov	r18,r2
    9304:	1505883a 	add	r2,r2,r20
    9308:	14400204 	addi	r17,r2,8
    930c:	00000806 	br	9330 <exit+0x8c>
    9310:	88800017 	ldw	r2,0(r17)
    9314:	29400017 	ldw	r5,0(r5)
    9318:	843fffc4 	addi	r16,r16,-1
    931c:	94bfff04 	addi	r18,r18,-4
    9320:	103ee83a 	callr	r2
    9324:	8c7fff04 	addi	r17,r17,-4
    9328:	9827d07a 	srai	r19,r19,1
    932c:	80000c16 	blt	r16,zero,9360 <exit+0xbc>
    9330:	a8802017 	ldw	r2,128(r21)
    9334:	954b883a 	add	r5,r18,r21
    9338:	b009883a 	mov	r4,r22
    933c:	14c4703a 	and	r2,r2,r19
    9340:	103ff31e 	bne	r2,zero,9310 <exit+0x6c>
    9344:	88800017 	ldw	r2,0(r17)
    9348:	843fffc4 	addi	r16,r16,-1
    934c:	94bfff04 	addi	r18,r18,-4
    9350:	103ee83a 	callr	r2
    9354:	8c7fff04 	addi	r17,r17,-4
    9358:	9827d07a 	srai	r19,r19,1
    935c:	803ff40e 	bge	r16,zero,9330 <exit+0x8c>
    9360:	a5000017 	ldw	r20,0(r20)
    9364:	a03fdc1e 	bne	r20,zero,92d8 <exit+0x34>
    9368:	b009883a 	mov	r4,r22
    936c:	00093fc0 	call	93fc <_exit>

00009370 <memcmp>:
    9370:	31bfffc4 	addi	r6,r6,-1
    9374:	00bfffc4 	movi	r2,-1
    9378:	30800826 	beq	r6,r2,939c <memcmp+0x2c>
    937c:	100f883a 	mov	r7,r2
    9380:	20c00003 	ldbu	r3,0(r4)
    9384:	28800003 	ldbu	r2,0(r5)
    9388:	31bfffc4 	addi	r6,r6,-1
    938c:	21000044 	addi	r4,r4,1
    9390:	29400044 	addi	r5,r5,1
    9394:	1880031e 	bne	r3,r2,93a4 <memcmp+0x34>
    9398:	31fff91e 	bne	r6,r7,9380 <memcmp+0x10>
    939c:	0005883a 	mov	r2,zero
    93a0:	f800283a 	ret
    93a4:	1885c83a 	sub	r2,r3,r2
    93a8:	f800283a 	ret

000093ac <strlen>:
    93ac:	20800007 	ldb	r2,0(r4)
    93b0:	2007883a 	mov	r3,r4
    93b4:	10000326 	beq	r2,zero,93c4 <strlen+0x18>
    93b8:	21000044 	addi	r4,r4,1
    93bc:	20800007 	ldb	r2,0(r4)
    93c0:	103ffd1e 	bne	r2,zero,93b8 <strlen+0xc>
    93c4:	20c5c83a 	sub	r2,r4,r3
    93c8:	f800283a 	ret

000093cc <alt_sim_halt>:
    93cc:	defffd04 	addi	sp,sp,-12
    93d0:	df000215 	stw	fp,8(sp)
    93d4:	df000204 	addi	fp,sp,8
    93d8:	e13ffe15 	stw	r4,-8(fp)
    93dc:	e0bffe17 	ldw	r2,-8(fp)
    93e0:	e0bfff15 	stw	r2,-4(fp)
    93e4:	00c00044 	movi	r3,1
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	180171ba 	wrctl	ctl6,r3
    93f0:	df000217 	ldw	fp,8(sp)
    93f4:	dec00304 	addi	sp,sp,12
    93f8:	f800283a 	ret

000093fc <_exit>:
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    93fc:	defffd04 	addi	sp,sp,-12
    9400:	dfc00215 	stw	ra,8(sp)
    9404:	df000115 	stw	fp,4(sp)
    9408:	df000104 	addi	fp,sp,4
    940c:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    9410:	e13fff17 	ldw	r4,-4(fp)
    9414:	00093cc0 	call	93cc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9418:	003fff06 	br	9418 <_exit+0x1c>
